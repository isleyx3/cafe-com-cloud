steps:
# Setup de variáveis de ambiente

# Teste unitário (Exemplo para Node)

# - name: node
#    id: Teste unitário
#    entrypoint: bash
#    args:
#      - '-c'
#      - |
#        echo "Setting up connection to Mongo Database"
#        curl ifconfig.me
#        IP="$(curl ifconfig.me)"
#        echo [{'"'ipAddress'"': '"'$$IP/32'"'}] > data.json
#        curl -X POST -d '@data.json' \
#          -H "Content-Type: application/json" -i \
#          -u "$$MONGO_API_KEY" \
#          --digest https://cloud.mongodb.com/api/atlas/v1.0/groups/62bc547534364249dd1668c7/accessList
#
#        echo "Running tests"
#        npm install
#        npm run test:cov
#
#        echo "Cleaning up Mongo Database connection"
#        curl -X DELETE \
#          -H "Content-Type: application/json" -i \
#          -u "$$MONGO_API_KEY" \
#          --digest https://cloud.mongodb.com/api/atlas/v1.0/groups/62bc547534364249dd1668c7/accessList/$$IP%2F32
#    secretEnv:
#      - MONGO_API_KEY
 
# SonarQube
  - name: gcr.io/cloud-builders/docker
    id: Análise de qualidade
    entrypoint: bash
    args:
      - '-c'
      - |
        docker run \
        --rm \
        -e SONAR_HOST_URL=http://34.36.237.5 \
        -e SONAR_LOGIN=sqa_ac58ba8f997f26277fe3ac4950419ae339b52319 \
        -v "/workspace/:/usr/src" \
        sonarsource/sonar-scanner-cli \
        -Dsonar.projectKey=$REPO_NAME \
        -Dsonar.qualitygate.wait=true \
#        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
#    secretEnv:
#      - SONAR_LOGIN

# Build da imagem do container
  - name: gcr.io/cloud-builders/docker
    id: Build
    entrypoint: bash
    args:
      - '-c'
      - |
        cd application
        docker build -t \
          southamerica-east1-docker.pkg.dev/poc-ipnet-cloud/$REPO_NAME/$REPO_NAME:$SHORT_SHA .

# Push da imagem do container
  - name: gcr.io/cloud-builders/docker
    id: push
    entrypoint: bash
    args:
      - '-c'
      - |

        docker push southamerica-east1-docker.pkg.dev/poc-ipnet-cloud/$REPO_NAME/$REPO_NAME:$SHORT_SHA

# Setup da conexão com GitHub
  - name: gcr.io/cloud-builders/git
    id: Setup github
    entrypoint: bash
    args:
      - '-c'
      - |
        ssh-keyscan -t rsa github.com > known_hosts.github
        echo "$$SSH_KEY" >> /root/.ssh/id_rsa
        chmod 400 /root/.ssh/id_rsa
        cp known_hosts.github /root/.ssh/known_hosts
    secretEnv:
      - SSH_KEY
    volumes:
      - name: ssh
        path: /root/.ssh

# Renderização dos manifestos
  - name: gcr.io/cloud-builders/git
    id: Renderizaçao yamls
    entrypoint: bash
    args:
      - '-c'
      - |


        git clone git@github.com:amandasantana2020/cafe-com-cloud.git
        cd $REPO_NAME
        git checkout $BRANCH_NAME
        cd application
        sed -i "s|\(.$REPO_NAME:.*\)|\/$REPO_NAME:$SHORT_SHA|g" deployment.yml
        cat deployment.yml
    volumes:
      - name: ssh
        path: /root/.ssh

# Atualização dos manifestos
  - name: gcr.io/cloud-builders/git
    id: Atualização yamls
    entrypoint: bash
    args:
      - '-c'
      - |
        cd $REPO_NAME

        git checkout $BRANCH_NAME
        git config --global user.email "cloudbuild@ipnet.cloud"
        git config --global user.name "Cloud Build"
        git add .
        git commit -m "Atualizando manifestos para imagem $REPO_NAME:$SHORT_SHA"
        git push
    volumes:
      - name: ssh
        path: /root/.ssh
     

availableSecrets:
  secretManager:

    - versionName: projects/$PROJECT_ID/secrets/SSH_KEY/versions/latest
      env: 'SSH_KEY'          
